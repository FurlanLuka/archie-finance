name: Deployment workflow

on:
  workflow_call:
    inputs:
      NAME:
        required: true
        type: string
      IS_TAGGED:
        required: true
        type: boolean
      ENVIRONMENT:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      BASE_BRANCH_NAME:
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      KUBE_CONFIG_DATA:
        required: true

jobs:
  affected_check:
    name: Nx Cloud - Main Job
    uses: nrwl/ci/.github/workflows/nx-cloud-main.yml@v0.8
    with:
      main-branch-name: ${{ inputs.BASE_BRANCH_NAME }}
      number-of-agents: 3
      parallel-commands: |
        npx nx-cloud record -- npx nx workspace-lint
        npx nx-cloud record -- npx nx format:check
      parallel-commands-on-agents: |
        npx nx affected --target=lint --parallel=3
  agents:
    name: Nx Cloud - Agents
    uses: nrwl/ci/.github/workflows/nx-cloud-agents.yml@v0.8
    with:
      number-of-agents: 3
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: heidiks/rabbitmq-delayed-message-exchange:3.10.2-management
        ports:
          - 5672:5672
      redis:
        image: redis:alpine3.16
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: ${{ inputs.BASE_BRANCH_NAME }}
      - uses: ./.github/actions/install-dependencies
        name: Install dependencies
      - name: Prepare testing environment
        run: npx nx generate @archie/plugin/workspace-generator:test-environment-generator
      - name: Integration Tests
        run: npx nx affected --target=test-integration --parallel=3 --ci
  build_setup:
    name: Build setup
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    outputs:
      affectedProjects: ${{ steps.affected-projects.outputs.affectedProjects }}
      imageTag: ${{ steps.extract-image-tag.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: ${{ inputs.BASE_BRANCH_NAME }}
      - uses: ./.github/actions/install-dependencies
        name: Install dependencies
      - uses: ./.github/actions/affected-projects
        id: affected-projects
        name: Extract affected apps
        with:
          base: origin/${{ inputs.BASE_BRANCH_NAME }}
      - name: Extract image tag
        id: extract-image-tag
        run: |
          if [[ ${{ inputs.IS_TAGGED }} == true ]]; then
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi
  build_and_publish:
    name: Build ${{ matrix.project }}
    if: ${{ needs.build_setup.outputs.affectedProjects != '[]' && needs.build_setup.outputs.affectedProjects != '' }}
    needs: [build_setup]
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.build_setup.outputs.affectedProjects) }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - uses: ./.github/actions/install-dependencies
        name: Install dependencies
      - if: contains(matrix.project, 'api')
        uses: ./.github/actions/publish-docker-image
        name: Build and publish docker image
        with:
          projectName: ${{ matrix.project }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
          ecr-repository: ${{ inputs.ECR_REPOSITORY }}
          image-tag: ${{ needs.build_setup.outputs.imageTag }}
      - if: contains(matrix.project, 'ui')
        uses: ./.github/actions/build-ui
        name: Build UI and save artifacts
        with:
          projectName: ${{ matrix.project }}
          environment: ${{ inputs.ENVIRONMENT }}
  deploy:
    name: Deploy ${{ matrix.project }}
    if: ${{ needs.build_setup.outputs.affectedProjects != '[]' && needs.build_setup.outputs.affectedProjects != '' }}
    needs: [build_and_publish, build_setup]
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.build_setup.outputs.affectedProjects) }}
    steps:
    - name: Poor mans manual deploy
      if: ${{ github.run_attempt== 1}}
      run: exit 1
    - uses: actions/checkout@v2
      name: Checkout
    - uses: ./.github/actions/install-dependencies
      name: Install dependencies
    - if: contains(matrix.project, 'api')
      uses: ./.github/actions/deploy-api
      name: Deploy API
      with:
        projectName: ${{ matrix.project }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}
        ecr-repository: ${{ inputs.ECR_REPOSITORY }}
        kube-config-data: ${{ secrets.KUBE_CONFIG_DATA }}
        environment: ${{ inputs.ENVIRONMENT }}
        image-tag: ${{ needs.build_setup.outputs.imageTag }}
    - if: contains(matrix.project, 'ui')
      uses: ./.github/actions/deploy-ui
      name: Deploy UI
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}
        projectName: ${{ matrix.project }}
        environment: ${{ inputs.ENVIRONMENT }}
