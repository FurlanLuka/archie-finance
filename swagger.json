{
  "openapi": "3.0.3",
  "info": {
    "title": "Archie finance API",
    "description": "",
    "version": "1.0.0",
    "contact": {}
  },
  "servers": [],
  "paths": {
    "/v1/rize/users": {
      "post": {
        "operationId": "RizeController_createUser",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "409": {
            "description": "Error response with 409 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ERR_CUSTOMER_ALREADY_EXISTS": {
                    "value": {
                      "statusCode": 409,
                      "message": "ERR_CUSTOMER_ALREADY_EXISTS",
                      "error": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/rize/users/cards/credit": {
      "get": {
        "operationId": "RizeController_getVirtualCard",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ERR_DEBIT_CARD_DOES_NOT_EXIST": {
                    "value": {
                      "statusCode": 404,
                      "message": "ERR_DEBIT_CARD_DOES_NOT_EXIST",
                      "error": "Not Found"
                    }
                  },
                  "ERR_ACTIVE_CUSTOMER_DOES_NOT_EXIST": {
                    "value": {
                      "statusCode": 404,
                      "message": "ERR_ACTIVE_CUSTOMER_DOES_NOT_EXIST",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/rize/users/transactions": {
      "get": {
        "operationId": "RizeController_getTransactions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ERR_ACTIVE_CUSTOMER_DOES_NOT_EXIST": {
                    "value": {
                      "statusCode": 404,
                      "message": "ERR_ACTIVE_CUSTOMER_DOES_NOT_EXIST",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/plaid/link_tokens": {
      "post": {
        "operationId": "PlaidController_createLinkToken",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaidLinkTokenDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/onboarding": {
      "get": {
        "operationId": "OnboardingController_getOnboardingRecord",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/kyc": {
      "get": {
        "operationId": "KycController_getKyc",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "KYC_NOT_FOUND": {
                    "value": {
                      "statusCode": 404,
                      "message": "KYC_NOT_FOUND",
                      "error": "KYC record not found. Please submit your KYC or contact support."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "KycController_createKyc",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KycDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Error response with 409 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "KYC_ALREADY_SUBMITTED": {
                    "value": {
                      "statusCode": 409,
                      "message": "KYC_ALREADY_SUBMITTED",
                      "error": "You have already submitted your KYC. If you made a mistake, please contact support."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/user/email-verification": {
      "get": {
        "operationId": "EmailController_checkEmailVerification",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailVerificationDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/user/email-verification/resend": {
      "post": {
        "operationId": "EmailController_resendEmailVerification",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "409": {
            "description": "Error response with 409 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "EMAIL_ALREADY_VERIFIED": {
                    "value": {
                      "statusCode": 409,
                      "message": "EMAIL_ALREADY_VERIFIED",
                      "error": "Your email has already been verified."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/user/mfa/enroll": {
      "post": {
        "operationId": "MfaController_enrollMfa",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSendEnrollmentTicketResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/user/mfa/enrollments/{enrollmentId}": {
      "delete": {
        "operationId": "MfaController_deleteMfaEnrollment",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ENROLLMENT_NOT_FOUND": {
                    "value": {
                      "statusCode": 404,
                      "message": "ENROLLMENT_NOT_FOUND",
                      "error": "Enrollment was not found."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/user/mfa/enrollments": {
      "get": {
        "operationId": "MfaController_getMfaEnrollments",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "nullable": true,
              "default": null,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEnrollmentResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/user/mfa/enrollment": {
      "get": {
        "operationId": "MfaController_isMfaEnrolled",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMfaEnrollmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/waitlist": {
      "post": {
        "operationId": "WaitlistController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/waitlist/verify/{id}": {
      "post": {
        "operationId": "WaitlistController_verify",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/waitlist/{id}": {
      "get": {
        "operationId": "WaitlistController_get",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWaitlistRecordResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/sales_connect": {
      "post": {
        "operationId": "SalesConnectController_connect",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesConnectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/webhooks/peach/payments": {
      "post": {
        "operationId": "PeachWebhookController_peachPaymentsHandler",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/webhook/fireblocks": {
      "post": {
        "operationId": "FireblocksWebhookController_webhook",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/webhooks/auth0": {
      "post": {
        "operationId": "Auth0Controller_webhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth0Logs"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/payment_instruments": {
      "get": {
        "operationId": "PeachPaymentInstrumentsController_getPaymentInstruments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInstrumentDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "PeachPaymentInstrumentsController_connectAccount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/payment_instruments/{id}": {
      "delete": {
        "operationId": "PeachPaymentInstrumentsController_removeAccount",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/loan_payments": {
      "get": {
        "operationId": "PaymentsController_getPayments",
        "parameters": [
          {
            "name": "startingAfter",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "endingBefore",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveDate",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "toEffectiveDate",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "PaymentsController_scheduleTransaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTransactionDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": ""
          },
          "400": {
            "description": "Error response with 400 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "AMOUNT_EXCEEDS_OUTSTANDING_BALANCE": {
                    "value": {
                      "statusCode": 400,
                      "message": "AMOUNT_EXCEEDS_OUTSTANDING_BALANCE",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_DRAW_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_DRAW_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "PAYMENT_INSTRUMENT_NOT_FOUND": {
                    "value": {
                      "statusCode": 404,
                      "message": "PAYMENT_INSTRUMENT_NOT_FOUND",
                      "error": "Not Found"
                    }
                  },
                  "AMOUNT_EXCEEDS_AVAILABLE_BALANCE": {
                    "value": {
                      "statusCode": 404,
                      "message": "AMOUNT_EXCEEDS_AVAILABLE_BALANCE",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/card_purchases": {
      "get": {
        "operationId": "PurchasesController_getPurchases",
        "parameters": [
          {
            "name": "startingAfter",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "endingBefore",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "fromEffectiveDate",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "toEffectiveDate",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchasesResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_DRAW_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_DRAW_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/loan_obligations": {
      "get": {
        "operationId": "ObligationsController_getCreditObligations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObligationsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/loan_interests": {
      "get": {
        "operationId": "InterestsController_getInterests",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanInterestsDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/loan_autopay": {
      "post": {
        "operationId": "AutopayController_setupAutopay",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAutopayDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "PAYMENT_INSTRUMENT_NOT_FOUND": {
                    "value": {
                      "statusCode": 404,
                      "message": "PAYMENT_INSTRUMENT_NOT_FOUND",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error response with 409 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "AUTOPAY_ALREADY_CONFIGURED": {
                    "value": {
                      "statusCode": 409,
                      "message": "AUTOPAY_ALREADY_CONFIGURED",
                      "error": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AutopayController_cancelAutopay",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "PAYMENT_INSTRUMENT_NOT_FOUND": {
                    "value": {
                      "statusCode": 404,
                      "message": "PAYMENT_INSTRUMENT_NOT_FOUND",
                      "error": "Not Found"
                    }
                  },
                  "AUTOPAY_NOT_CONFIGURED": {
                    "value": {
                      "statusCode": 404,
                      "message": "AUTOPAY_NOT_CONFIGURED",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "AutopayController_getAutopayConfig",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutopayDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "PAYMENT_INSTRUMENT_NOT_FOUND": {
                    "value": {
                      "statusCode": 404,
                      "message": "PAYMENT_INSTRUMENT_NOT_FOUND",
                      "error": "Not Found"
                    }
                  },
                  "AUTOPAY_NOT_CONFIGURED": {
                    "value": {
                      "statusCode": 404,
                      "message": "AUTOPAY_NOT_CONFIGURED",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/loan_autopay/documents": {
      "post": {
        "operationId": "AutopayDocumentsController_createAutopayAgreement",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAutopayDocumentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutopayAgreementDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "PAYMENT_INSTRUMENT_NOT_FOUND": {
                    "value": {
                      "statusCode": 404,
                      "message": "PAYMENT_INSTRUMENT_NOT_FOUND",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/loan_balances": {
      "get": {
        "operationId": "LoanBalancesController_getLoanBalances",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanBalancesDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found"
                    }
                  },
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/loan_statements": {
      "get": {
        "operationId": "LoanStatementsController_getLoanStatements",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatementDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/loan_statements/{documentId}": {
      "get": {
        "operationId": "LoanStatementsController_getLoanDocumentUrl",
        "parameters": [
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoanDocumentDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "BORROWER_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "BORROWER_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  },
                  "CREDIT_LINE_NOT_FOUND_ERROR": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_NOT_FOUND_ERROR",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/ltv": {
      "get": {
        "operationId": "LtvController_getCurrentLtv",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LtvDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "CREDIT_NOT_SET_UP": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_NOT_SET_UP",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/margin_calls": {
      "get": {
        "operationId": "MarginController_getMarginCalls",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarginCallDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/paypal/orders": {
      "post": {
        "operationId": "PaypalController_createOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResponseDto"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "PaypalController_getOrders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetOrderResponseDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/paypal/orders/{orderId}": {
      "get": {
        "operationId": "PaypalController_getOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/paypal/orders/{orderId}/capture": {
      "post": {
        "operationId": "PaypalController_captureOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/paypal/webhook": {
      "post": {
        "operationId": "PaypalController_handleWebhook",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/ledger": {
      "get": {
        "operationId": "LedgerController_getLedger",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerDto"
                }
              }
            }
          }
        }
      }
    },
    "/internal/ledger/recalculate": {
      "post": {
        "operationId": "InternalLedgerController_recaltulateLedgers",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/asset/price": {
      "get": {
        "operationId": "AssetPricesController_getLatestAssetPrices",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetPriceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/asset/price/{assetId}": {
      "get": {
        "operationId": "AssetPricesController_getLatestAssetPrice",
        "parameters": [
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPriceDto"
                }
              }
            }
          }
        }
      }
    },
    "/internal/asset/price/fetch": {
      "post": {
        "operationId": "InternalAssetPricesController_fetchAssetPrices",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/v1/ledger/liquidation": {
      "get": {
        "operationId": "LiquidationController_getLiquidations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Liquidation"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/ledger/withdraw": {
      "post": {
        "operationId": "WithdrawController_withdraw",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawPayloadDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Error response with 400 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "INVALID_WITHDRAWAL_AMOUNT": {
                    "value": {
                      "statusCode": 400,
                      "message": "INVALID_WITHDRAWAL_AMOUNT",
                      "error": "Bad Request"
                    }
                  },
                  "WITHDRAWAL_AMOUNT_TOO_HIGH": {
                    "value": {
                      "statusCode": 400,
                      "message": "WITHDRAWAL_AMOUNT_TOO_HIGH",
                      "error": "Bad Request"
                    }
                  },
                  "INVALID_ASSET": {
                    "value": {
                      "statusCode": 400,
                      "message": "INVALID_ASSET",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/ledger/withdraw/{assetId}/max_amount": {
      "get": {
        "operationId": "WithdrawController_getMaxWithdrawalAmount",
        "parameters": [
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaxWithdrawalAmountResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/vault_account/deposit_address/{assetId}": {
      "get": {
        "operationId": "VaultAccountController_getOrCreateDepositAddresss",
        "parameters": [
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositAddressDto"
                }
              }
            }
          }
        }
      }
    },
    "/v2/credit_lines": {
      "post": {
        "operationId": "CreditLineController_createCreditLine",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditLineDto"
                }
              }
            }
          },
          "400": {
            "description": "Error response with 400 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "NOT_ENOUGH_COLLATERAL": {
                    "value": {
                      "statusCode": 400,
                      "message": "NOT_ENOUGH_COLLATERAL",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error response with 409 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "CREDIT_LINE_ALREADY_EXISTS": {
                    "value": {
                      "statusCode": 409,
                      "message": "CREDIT_LINE_ALREADY_EXISTS",
                      "error": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "CreditLineController_getCreditLine",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditLineDto"
                }
              }
            }
          },
          "404": {
            "description": "Error response with 404 status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "CREDIT_LINE_RECORD_NOT_FOUND": {
                    "value": {
                      "statusCode": 404,
                      "message": "CREDIT_LINE_RECORD_NOT_FOUND",
                      "error": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/v1/websockets/auth": {
      "post": {
        "operationId": "WebsocketController_createAuthToken",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CardResponseDto": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "frozen"
            ]
          },
          "freezeReason": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "image",
          "status",
          "freezeReason"
        ]
      },
      "PaginationMetaDto": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "number"
          },
          "count": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "totalCount",
          "count",
          "page",
          "limit"
        ]
      },
      "TransactionDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "atm_withdrawal",
              "card_purchase",
              "card_refund",
              "dispute",
              "external_transfer",
              "fee",
              "credit",
              "internal_transfer",
              "other",
              "reversed_transfer",
              "third_party_transfer",
              "BALANCE_PAYMENT"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "pending",
              "settled",
              "failed"
            ]
          },
          "us_dollar_amount": {
            "type": "string"
          },
          "settled_at": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string"
          },
          "is_adjustment": {
            "type": "boolean"
          },
          "mcc": {
            "type": "string",
            "nullable": true
          },
          "merchant_location": {
            "type": "string",
            "nullable": true
          },
          "merchant_name": {
            "type": "string",
            "nullable": true
          },
          "merchant_number": {
            "type": "string",
            "nullable": true
          },
          "denial_reason": {
            "type": "string",
            "nullable": true
          },
          "net_asset": {
            "type": "string",
            "enum": [
              "positive",
              "negative"
            ]
          }
        },
        "required": [
          "description",
          "type",
          "status",
          "us_dollar_amount",
          "settled_at",
          "created_at",
          "is_adjustment",
          "mcc",
          "merchant_location",
          "merchant_name",
          "merchant_number",
          "denial_reason",
          "net_asset"
        ]
      },
      "TransactionResponseDto": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/PaginationMetaDto"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDto"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "PlaidLinkTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "message"
        ]
      },
      "OnboardingDto": {
        "type": "object",
        "properties": {
          "kycStage": {
            "type": "boolean"
          },
          "emailVerificationStage": {
            "type": "boolean"
          },
          "collateralizationStage": {
            "type": "boolean"
          },
          "cardActivationStage": {
            "type": "boolean"
          },
          "mfaEnrollmentStage": {
            "type": "boolean"
          },
          "completed": {
            "type": "boolean"
          }
        },
        "required": [
          "kycStage",
          "emailVerificationStage",
          "collateralizationStage",
          "cardActivationStage",
          "mfaEnrollmentStage",
          "completed"
        ]
      },
      "KycResponseDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "addressStreet": {
            "type": "string"
          },
          "addressStreetNumber": {
            "type": "string"
          },
          "addressLocality": {
            "type": "string"
          },
          "addressRegion": {
            "type": "string"
          },
          "addressPostalCode": {
            "type": "string"
          },
          "addressCountry": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "phoneNumberCountryCode": {
            "type": "string"
          },
          "ssn": {
            "type": "string"
          },
          "income": {
            "type": "number"
          },
          "aptUnit": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "dateOfBirth",
          "addressStreet",
          "addressStreetNumber",
          "addressLocality",
          "addressRegion",
          "addressPostalCode",
          "addressCountry",
          "phoneNumber",
          "phoneNumberCountryCode",
          "ssn",
          "income",
          "aptUnit",
          "createdAt"
        ]
      },
      "KycDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "format": "date-time",
            "type": "string"
          },
          "addressStreet": {
            "type": "string"
          },
          "addressStreetNumber": {
            "type": "string"
          },
          "addressLocality": {
            "type": "string"
          },
          "addressRegion": {
            "type": "string"
          },
          "addressPostalCode": {
            "type": "string"
          },
          "addressCountry": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "phoneNumberCountryCode": {
            "type": "string"
          },
          "ssn": {
            "type": "string",
            "minLength": 9,
            "maxLength": 9
          },
          "income": {
            "type": "number"
          },
          "aptUnit": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "firstName",
          "lastName",
          "dateOfBirth",
          "addressStreet",
          "addressStreetNumber",
          "addressLocality",
          "addressRegion",
          "addressPostalCode",
          "addressCountry",
          "phoneNumber",
          "phoneNumberCountryCode",
          "ssn",
          "income",
          "aptUnit"
        ]
      },
      "EmailVerificationDto": {
        "type": "object",
        "properties": {
          "isVerified": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "isVerified",
          "email"
        ]
      },
      "GetSendEnrollmentTicketResponseDto": {
        "type": "object",
        "properties": {
          "ticket_id": {
            "type": "string"
          },
          "ticket_url": {
            "type": "string"
          }
        },
        "required": [
          "ticket_id",
          "ticket_url"
        ]
      },
      "GetEnrollmentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "object"
          },
          "enrolled_at": {
            "type": "string"
          },
          "last_auth": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "auth_method": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "status",
          "enrolled_at",
          "last_auth",
          "type",
          "auth_method"
        ]
      },
      "GetMfaEnrollmentResponse": {
        "type": "object",
        "properties": {
          "isEnrolled": {
            "type": "boolean"
          }
        },
        "required": [
          "isEnrolled"
        ]
      },
      "CreateDto": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "referrer": {
            "type": "string"
          }
        },
        "required": [
          "emailAddress"
        ]
      },
      "GetWaitlistRecordResponseDto": {
        "type": "object",
        "properties": {
          "numberOfReferrals": {
            "type": "number"
          },
          "numberOfVerifiedReferrals": {
            "type": "number"
          },
          "waitlistRank": {
            "type": "number"
          },
          "referralCode": {
            "type": "string"
          }
        },
        "required": [
          "numberOfReferrals",
          "numberOfVerifiedReferrals",
          "waitlistRank",
          "referralCode"
        ]
      },
      "SalesConnectDto": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "company": {
            "type": "string"
          }
        },
        "required": [
          "emailAddress",
          "fullName",
          "company"
        ]
      },
      "Auth0Logs": {
        "type": "object",
        "properties": {}
      },
      "PaymentInstrumentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "mask": {
            "type": "string"
          },
          "subType": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "mask",
          "subType"
        ]
      },
      "ConnectAccountDto": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "publicToken": {
            "type": "string"
          }
        },
        "required": [
          "accountId",
          "publicToken"
        ]
      },
      "PaymentResponseDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isExternal": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "scheduled",
              "initiated",
              "pending",
              "succeeded",
              "failed",
              "inDispute",
              "canceled",
              "chargeback"
            ]
          },
          "transactionType": {
            "type": "string",
            "enum": [
              "payment",
              "serviceCredit"
            ]
          },
          "paymentDetails": {
            "type": "object",
            "properties": {
              "type": {
                "required": true,
                "enum": [
                  "ach",
                  "debitCard",
                  "creditCard",
                  "check",
                  "cash",
                  "payroll",
                  "paymentNetwork"
                ],
                "type": "string"
              },
              "reason": {
                "required": true,
                "enum": [
                  "autoPay",
                  "oneTimePay",
                  "settlement",
                  "reversal",
                  "reimbursement"
                ],
                "type": "string"
              },
              "fromInstrumentId": {
                "required": true,
                "type": "string"
              },
              "paymentNetworkName": {
                "required": true,
                "type": "string"
              },
              "accountNumberLastFour": {
                "required": false,
                "type": "string"
              }
            }
          },
          "actualAmount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "failureDescriptionShort": {
            "type": "string",
            "nullable": true
          },
          "failureDescriptionLong": {
            "type": "string",
            "nullable": true
          },
          "autopayPlanId": {
            "type": "string",
            "nullable": true
          },
          "cancelReason": {
            "type": "string",
            "nullable": true
          },
          "timestamps": {
            "type": "object",
            "properties": {
              "createdAt": {
                "required": true,
                "type": "string"
              },
              "scheduledDate": {
                "required": true,
                "type": "string",
                "nullable": true
              },
              "succeededAt": {
                "required": true,
                "type": "string",
                "nullable": true
              },
              "failedAt": {
                "required": true,
                "type": "string",
                "nullable": true
              },
              "chargebackAt": {
                "required": true,
                "type": "string",
                "nullable": true
              }
            }
          }
        },
        "required": [
          "id",
          "isExternal",
          "status",
          "transactionType",
          "paymentDetails",
          "actualAmount",
          "currency",
          "failureDescriptionShort",
          "failureDescriptionLong",
          "autopayPlanId",
          "cancelReason",
          "timestamps"
        ]
      },
      "PaymentsResponseDto": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "total": {
                "required": true,
                "type": "number"
              },
              "count": {
                "required": true,
                "type": "number"
              },
              "nextUrl": {
                "required": true,
                "type": "string",
                "nullable": true
              },
              "previousUrl": {
                "required": true,
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponseDataDto"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "ScheduleTransactionDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "minimum": 1
          },
          "scheduledDate": {
            "type": "string",
            "nullable": true
          },
          "paymentInstrumentId": {
            "type": "string",
            "pattern": "PEACH_ID_REGEX"
          }
        },
        "required": [
          "amount",
          "paymentInstrumentId"
        ]
      },
      "PurchaseDetailsDto": {
        "type": "object",
        "properties": {
          "transactionType": {
            "nullable": true,
            "type": "string",
            "enum": [
              "atm_withdrawal",
              "card_purchase",
              "card_refund",
              "dispute",
              "external_transfer",
              "fee",
              "credit",
              "internal_transfer",
              "other",
              "reversed_transfer",
              "third_party_transfer"
            ]
          },
          "mcc": {
            "type": "string"
          },
          "merchantLocation": {
            "type": "string"
          },
          "merchantName": {
            "type": "string"
          },
          "merchantNumber": {
            "type": "string"
          }
        },
        "required": [
          "transactionType",
          "mcc",
          "merchantLocation",
          "merchantName",
          "merchantNumber"
        ]
      },
      "PurchasesResponseDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "regular",
              "refund",
              "cashBack"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "settled",
              "pending",
              "canceled",
              "declined",
              "disputed"
            ]
          },
          "amount": {
            "type": "number"
          },
          "denialReason": {
            "type": "string",
            "nullable": true
          },
          "timestamps": {
            "type": "object",
            "properties": {
              "createdAt": {
                "required": true,
                "type": "string"
              },
              "settledAt": {
                "required": true,
                "type": "string",
                "nullable": true
              }
            }
          },
          "purchaseDetails": {
            "$ref": "#/components/schemas/PurchaseDetailsDto"
          }
        },
        "required": [
          "id",
          "description",
          "type",
          "status",
          "amount",
          "denialReason",
          "timestamps",
          "purchaseDetails"
        ]
      },
      "PurchasesResponseDto": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "total": {
                "required": true,
                "type": "number"
              },
              "count": {
                "required": true,
                "type": "number"
              },
              "nextUrl": {
                "required": true,
                "type": "string",
                "nullable": true
              },
              "previousUrl": {
                "required": true,
                "type": "string",
                "nullable": true
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasesResponseDataDto"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "ObligationResponseDto": {
        "type": "object",
        "properties": {
          "capitalizedAmount": {
            "type": "number"
          },
          "dueDate": {
            "type": "string"
          },
          "fulfilledAmount": {
            "type": "number"
          },
          "gracePeriod": {
            "type": "string",
            "nullable": true
          },
          "isOverdue": {
            "type": "boolean"
          },
          "obligationAmount": {
            "type": "number"
          },
          "overpaymentsAmount": {
            "type": "number"
          },
          "remainingAmount": {
            "type": "number"
          }
        },
        "required": [
          "capitalizedAmount",
          "dueDate",
          "fulfilledAmount",
          "gracePeriod",
          "isOverdue",
          "obligationAmount",
          "overpaymentsAmount",
          "remainingAmount"
        ]
      },
      "ObligationsResponseDto": {
        "type": "object",
        "properties": {
          "outstandingBalances": {
            "type": "object",
            "properties": {
              "outstandingFeesAmount": {
                "required": true,
                "type": "number"
              },
              "outstandingInterestAmount": {
                "required": true,
                "type": "number"
              },
              "outstandingPrincipalAmount": {
                "required": true,
                "type": "number"
              },
              "outstandingTotalAmount": {
                "required": true,
                "type": "number"
              }
            }
          },
          "overdueBalances": {
            "type": "object",
            "properties": {
              "overdueFeesAmount": {
                "required": true,
                "type": "number"
              },
              "overdueInterestAmount": {
                "required": true,
                "type": "number"
              },
              "overduePrincipalAmount": {
                "required": true,
                "type": "number"
              },
              "overdueTotalAmount": {
                "required": true,
                "type": "number"
              }
            }
          },
          "dueBalances": {
            "type": "object",
            "properties": {
              "dueFeesAmount": {
                "required": true,
                "type": "number"
              },
              "dueInterestAmount": {
                "required": true,
                "type": "number"
              },
              "duePrincipalAmount": {
                "required": true,
                "type": "number"
              },
              "dueTotalAmount": {
                "required": true,
                "type": "number"
              }
            }
          },
          "statementObligations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObligationResponseDto"
            }
          },
          "futureObligations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObligationResponseDto"
            }
          }
        },
        "required": [
          "outstandingBalances",
          "overdueBalances",
          "dueBalances",
          "statementObligations",
          "futureObligations"
        ]
      },
      "LoanInterestsDto": {
        "type": "object",
        "properties": {
          "aprNominal": {
            "type": "number"
          },
          "aprEffective": {
            "type": "number"
          }
        },
        "required": [
          "aprNominal",
          "aprEffective"
        ]
      },
      "CreateAutopayDto": {
        "type": "object",
        "properties": {
          "amountType": {
            "type": "string",
            "enum": [
              "statementMinimumAmount",
              "statementMinimumAmountPlusExtra",
              "statementBalanceAmount"
            ]
          },
          "extraAmount": {
            "type": "number",
            "nullable": true,
            "minimum": 1
          },
          "paymentInstrumentId": {
            "type": "string",
            "pattern": "PEACH_ID_REGEX"
          },
          "isAlignedToDueDates": {
            "type": "boolean"
          },
          "offsetFromDueDate": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "agreementDocumentId": {
            "type": "string"
          }
        },
        "required": [
          "amountType",
          "paymentInstrumentId",
          "isAlignedToDueDates",
          "agreementDocumentId"
        ]
      },
      "AutopaySchedule": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "paymentType": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "originalAmount": {
            "type": "number"
          },
          "principalAmount": {
            "type": "number"
          },
          "interestAmount": {
            "type": "number"
          }
        },
        "required": [
          "date",
          "paymentType",
          "status",
          "amount",
          "originalAmount",
          "principalAmount",
          "interestAmount"
        ]
      },
      "AutopayDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "statementMinimumAmount",
              "statementMinimumAmountPlusExtra",
              "statementBalanceAmount"
            ]
          },
          "extraAmount": {
            "type": "number"
          },
          "isAlignedToDueDates": {
            "type": "boolean"
          },
          "paymentFrequency": {
            "type": "string",
            "enum": [
              "twiceMonthly",
              "everyTwoWeeks",
              "monthly"
            ]
          },
          "paymentInstrumentId": {
            "type": "string"
          },
          "cancelReason": {
            "type": "string"
          },
          "schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutopaySchedule"
            }
          }
        },
        "required": [
          "type",
          "extraAmount",
          "isAlignedToDueDates",
          "paymentFrequency",
          "paymentInstrumentId",
          "cancelReason",
          "schedule"
        ]
      },
      "CreateAutopayDocumentDto": {
        "type": "object",
        "properties": {
          "paymentInstrumentId": {
            "type": "string",
            "pattern": "PEACH_ID_REGEX"
          }
        },
        "required": [
          "paymentInstrumentId"
        ]
      },
      "AutopayAgreementDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "document": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "document"
        ]
      },
      "LoanBalancesDto": {
        "type": "object",
        "properties": {
          "isBalanceChangeInProgress": {
            "type": "boolean"
          },
          "totalCredit": {
            "type": "number"
          },
          "availableCredit": {
            "type": "number"
          },
          "utilizationAmount": {
            "type": "number"
          }
        },
        "required": [
          "isBalanceChangeInProgress",
          "totalCredit",
          "availableCredit",
          "utilizationAmount"
        ]
      },
      "StatementDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true
          },
          "periodId": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "billingCycleStartDate": {
            "type": "string"
          },
          "billingCycleEndDate": {
            "type": "string"
          },
          "paymentDueDate": {
            "type": "string"
          },
          "documentDescriptorId": {
            "type": "string"
          },
          "statementDate": {
            "type": "string"
          },
          "minimumDueAmount": {
            "type": "number"
          },
          "overdueAmount": {
            "type": "number"
          },
          "newBalanceAmount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "periodId",
          "version",
          "billingCycleStartDate",
          "billingCycleEndDate",
          "paymentDueDate",
          "documentDescriptorId",
          "statementDate",
          "minimumDueAmount",
          "overdueAmount",
          "newBalanceAmount"
        ]
      },
      "LoanDocumentDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "LtvDto": {
        "type": "object",
        "properties": {
          "ltv": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "good",
              "ok",
              "warning",
              "margin_call"
            ]
          }
        },
        "required": [
          "ltv",
          "status"
        ]
      },
      "MarginCallDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "completed"
            ]
          },
          "automaticLiquidationAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "automaticLiquidationAt",
          "createdAt"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "paymentAmount": {
            "type": "number",
            "minimum": 1
          }
        },
        "required": [
          "paymentAmount"
        ]
      },
      "CreateOrderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "paymentUrl": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "paymentUrl"
        ]
      },
      "GetOrderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "enum": [
              "CREATED",
              "COMPLETED"
            ],
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "status",
          "amount"
        ]
      },
      "InternalLedgerAccountDataDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "assetAmount": {
            "type": "string"
          },
          "assetPrice": {
            "type": "string"
          },
          "accountValue": {
            "type": "string"
          }
        },
        "required": [
          "assetId",
          "assetAmount",
          "assetPrice",
          "accountValue"
        ]
      },
      "LedgerDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalLedgerAccountDataDto"
            }
          }
        },
        "required": [
          "value",
          "accounts"
        ]
      },
      "AssetPriceDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "dailyChange": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },
        "required": [
          "assetId",
          "price",
          "dailyChange",
          "currency"
        ]
      },
      "Liquidation": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "assetId",
          "amount",
          "createdAt",
          "updatedAt"
        ]
      },
      "WithdrawPayloadDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "amount": {
            "type": "string",
            "pattern": "/^\\d+((.)|(.\\d{0,18})?)$/"
          },
          "destinationAddress": {
            "type": "string"
          }
        },
        "required": [
          "assetId",
          "amount",
          "destinationAddress"
        ]
      },
      "WithdrawResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "MaxWithdrawalAmountResponseDto": {
        "type": "object",
        "properties": {
          "maxAmount": {
            "type": "string"
          }
        },
        "required": [
          "maxAmount"
        ]
      },
      "DepositAddressDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "asset": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "asset"
        ]
      },
      "CreditLimitAssetAllocationDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "allocationPercentage": {
            "type": "number"
          },
          "allocatedAssetValue": {
            "type": "number"
          }
        },
        "required": [
          "assetId",
          "allocationPercentage",
          "allocatedAssetValue"
        ]
      },
      "CreditLineDto": {
        "type": "object",
        "properties": {
          "creditLimit": {
            "type": "number"
          },
          "creditLimitAssetAllocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditLimitAssetAllocationDto"
            }
          }
        },
        "required": [
          "creditLimit",
          "creditLimitAssetAllocation"
        ]
      },
      "AuthTokenDto": {
        "type": "object",
        "properties": {
          "authToken": {
            "type": "string"
          }
        },
        "required": [
          "authToken"
        ]
      }
    },
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    }
  }
}